{
	"info": {
		"_postman_id": "a6197717-5a63-4358-aaa0-a30a908327a2",
		"name": "LU2-WebApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42398459"
	},
	"item": [
		{
			"name": "/account/logout-check",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url_domain}}/account/logout",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"account",
						"logout"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/account/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"account",
								"logout"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/account/login",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userName\": \"\",\n  \"password\": \"Test123456!\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url_domain}}/account/login",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"account",
						"login"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"<string>\",\n  \"userName\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/account/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"account",
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/scene",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the JSON response body\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Ensure the response is an array\r",
							"if (Array.isArray(response) && response.length > 0) {\r",
							"    // Select a random index from the array\r",
							"    const randomIndex = Math.floor(Math.random() * response.length);\r",
							"    \r",
							"    // Get the random scene object\r",
							"    const randomScene = response[randomIndex];\r",
							"    \r",
							"    // Set the randomDeleteId environment variable with the selected id\r",
							"    pm.environment.set(\"randomDeleteId\", randomScene.id);\r",
							"    \r",
							"    // Log the randomDeleteId to the Postman console for verification\r",
							"    console.log(\"Random scene id selected:\", randomScene.id);\r",
							"} else {\r",
							"    console.log(\"No scenes found in the response.\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain"
					}
				],
				"url": {
					"raw": "{{base_url_domain}}/scene",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"scene"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/scene",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"scene"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n  {\n    \"id\": \"<uuid>\",\n    \"name\": \"<string>\",\n    \"maxLength\": \"<integer>\",\n    \"maxHeight\": \"<integer>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"environmentType\": \"<integer>\"\n  },\n  {\n    \"id\": \"<uuid>\",\n    \"name\": \"<string>\",\n    \"maxLength\": \"<integer>\",\n    \"maxHeight\": \"<integer>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"environmentType\": \"<integer>\"\n  }\n]"
				}
			]
		},
		{
			"name": "/scene/:environmentId-check",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url_domain}}/scene/{{randomDeleteId}}",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"scene",
						"{{randomDeleteId}}"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/scene/:environmentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"scene",
								":environmentId"
							],
							"variable": [
								{
									"key": "environmentId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/scene",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Function to generate a random string\r",
							"function generateRandomString(length) {\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    const charactersLength = characters.length;\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"// Generate a random string for the name field\r",
							"const randomName = generateRandomString(10); // 10-character random string\r",
							"\r",
							"// Set the random name to the environment variable for use in the request body\r",
							"pm.environment.set(\"randomName\", randomName);\r",
							"\r",
							"// Log the random name for debugging\r",
							"console.log(\"Random name generated:\", randomName);\r",
							"\r",
							"\r",
							"let responseData = pm.response.json();\r",
							"let createdEnvironmentId = responseData.id;\r",
							"\r",
							"pm.environment.set(\"sceneId\", createdEnvironmentId);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"environmentType\": \"1\",\n  \"maxHeight\": \"25\",\n  \"maxLength\": \"25\",\n  \"name\": \"{{randomName}}\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url_domain}}/scene",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"scene"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"environmentType\": \"<integer>\",\n  \"maxHeight\": \"<integer>\",\n  \"maxLength\": \"<integer>\",\n  \"name\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/scene",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"scene"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/scene/:environmentId",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain"
					}
				],
				"url": {
					"raw": "{{base_url_domain}}/scene/{{sceneId}}",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"scene",
						"{{sceneId}}"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/scene/:environmentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"scene",
								":environmentId"
							],
							"variable": [
								{
									"key": "environmentId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": \"<uuid>\",\n  \"name\": \"<string>\",\n  \"maxLength\": \"<integer>\",\n  \"maxHeight\": \"<integer>\",\n  \"createdAt\": \"<dateTime>\",\n  \"updatedAt\": \"<dateTime>\",\n  \"environmentType\": \"<integer>\"\n}"
				}
			]
		},
		{
			"name": "/scene/entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"environmentId\": \"{{sceneId}}\",\n  \"prefab_Id\": \"test\",\n  \"positionX\": \"1\",\n  \"positionY\": \"1\",\n  \"scaleX\": \"1\",\n  \"scaleY\": \"1\",\n  \"rotationZ\": \"1\",\n  \"sortingLayer\": \"1\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url_domain}}/scene/entity",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"scene",
						"entity"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"environmentId\": \"<uuid>\",\n  \"prefab_Id\": \"<string>\",\n  \"positionX\": \"<float>\",\n  \"positionY\": \"<float>\",\n  \"scaleX\": \"<float>\",\n  \"scaleY\": \"<float>\",\n  \"rotationZ\": \"<float>\",\n  \"sortingLayer\": \"<integer>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/scene/entity",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"scene",
								"entity"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": \"<uuid>\",\n  \"prefab_Id\": \"<string>\",\n  \"positionX\": \"<float>\",\n  \"positionY\": \"<float>\",\n  \"scaleX\": \"<float>\",\n  \"scaleY\": \"<float>\",\n  \"rotationZ\": \"<float>\",\n  \"sortingLayer\": \"<integer>\",\n  \"environmentId\": \"<uuid>\"\n}"
				}
			]
		},
		{
			"name": "/scene/:environmentId/entities",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the JSON response body\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Ensure the response is an array\r",
							"if (Array.isArray(response) && response.length > 0) {\r",
							"    // Select a random entity from the array\r",
							"    const randomIndex = Math.floor(Math.random() * response.length);\r",
							"    const randomEntity = response[randomIndex];\r",
							"    \r",
							"    // Add the entityId field to the response with the random id\r",
							"    pm.environment.set(\"entityId\", randomEntity.id);\r",
							"    \r",
							"    // Log the random entity id to the Postman console for verification\r",
							"    console.log(\"Random entityId selected:\", randomEntity.id);\r",
							"} else {\r",
							"    console.log(\"No entities found in the response.\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain"
					}
				],
				"url": {
					"raw": "{{base_url_domain}}/scene/{{sceneId}}/entities",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"scene",
						"{{sceneId}}",
						"entities"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/scene/:environmentId/entities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"scene",
								":environmentId",
								"entities"
							],
							"variable": [
								{
									"key": "environmentId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n  {\n    \"createdAt\": \"<dateTime>\",\n    \"environmentId\": \"<uuid>\",\n    \"prefab_Id\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"positionX\": \"<float>\",\n    \"positionY\": \"<float>\",\n    \"scaleX\": \"<float>\",\n    \"scaleY\": \"<float>\",\n    \"rotationZ\": \"<float>\",\n    \"sortingLayer\": \"<integer>\",\n    \"environment\": {\n      \"createdAt\": \"<dateTime>\",\n      \"maxHeight\": \"<integer>\",\n      \"maxLength\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"userId\": \"<uuid>\",\n      \"id\": \"<uuid>\",\n      \"updatedAt\": \"<dateTime>\",\n      \"user\": {\n        \"normalizedUserName\": \"<string>\",\n        \"userName\": \"<string>\",\n        \"id\": \"<uuid>\",\n        \"userClaims\": [\n          {\n            \"claimType\": \"<string>\",\n            \"claimValue\": \"<string>\",\n            \"userId\": \"<string>\",\n            \"id\": \"<integer>\",\n            \"user\": {\n              \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n            }\n          },\n          {\n            \"claimType\": \"<string>\",\n            \"claimValue\": \"<string>\",\n            \"userId\": \"<string>\",\n            \"id\": \"<integer>\",\n            \"user\": {\n              \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n            }\n          }\n        ]\n      },\n      \"environmentType\": \"<integer>\"\n    },\n    \"updatedAt\": \"<dateTime>\"\n  },\n  {\n    \"createdAt\": \"<dateTime>\",\n    \"environmentId\": \"<uuid>\",\n    \"prefab_Id\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"positionX\": \"<float>\",\n    \"positionY\": \"<float>\",\n    \"scaleX\": \"<float>\",\n    \"scaleY\": \"<float>\",\n    \"rotationZ\": \"<float>\",\n    \"sortingLayer\": \"<integer>\",\n    \"environment\": {\n      \"createdAt\": \"<dateTime>\",\n      \"maxHeight\": \"<integer>\",\n      \"maxLength\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"userId\": \"<uuid>\",\n      \"id\": \"<uuid>\",\n      \"updatedAt\": \"<dateTime>\",\n      \"user\": {\n        \"normalizedUserName\": \"<string>\",\n        \"userName\": \"<string>\",\n        \"id\": \"<uuid>\",\n        \"userClaims\": [\n          {\n            \"claimType\": \"<string>\",\n            \"claimValue\": \"<string>\",\n            \"userId\": \"<string>\",\n            \"id\": \"<integer>\",\n            \"user\": {\n              \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n            }\n          },\n          {\n            \"claimType\": \"<string>\",\n            \"claimValue\": \"<string>\",\n            \"userId\": \"<string>\",\n            \"id\": \"<integer>\",\n            \"user\": {\n              \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n            }\n          }\n        ]\n      },\n      \"environmentType\": \"<integer>\"\n    },\n    \"updatedAt\": \"<dateTime>\"\n  }\n]"
				}
			]
		},
		{
			"name": "/scene/entity/:entityId",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain"
					}
				],
				"url": {
					"raw": "{{base_url_domain}}/scene/entity/{{entityId}}",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"scene",
						"entity",
						"{{entityId}}"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/scene/entity/:entityId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"scene",
								"entity",
								":entityId"
							],
							"variable": [
								{
									"key": "entityId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"createdAt\": \"<dateTime>\",\n  \"environmentId\": \"<uuid>\",\n  \"prefab_Id\": \"<string>\",\n  \"id\": \"<uuid>\",\n  \"positionX\": \"<float>\",\n  \"positionY\": \"<float>\",\n  \"scaleX\": \"<float>\",\n  \"scaleY\": \"<float>\",\n  \"rotationZ\": \"<float>\",\n  \"sortingLayer\": \"<integer>\",\n  \"environment\": {\n    \"createdAt\": \"<dateTime>\",\n    \"maxHeight\": \"<integer>\",\n    \"maxLength\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"userId\": \"<uuid>\",\n    \"id\": \"<uuid>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"user\": {\n      \"normalizedUserName\": \"<string>\",\n      \"userName\": \"<string>\",\n      \"id\": \"<uuid>\",\n      \"userClaims\": [\n        {\n          \"claimType\": \"<string>\",\n          \"claimValue\": \"<string>\",\n          \"userId\": \"<string>\",\n          \"id\": \"<integer>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          }\n        },\n        {\n          \"claimType\": \"<string>\",\n          \"claimValue\": \"<string>\",\n          \"userId\": \"<string>\",\n          \"id\": \"<integer>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          }\n        }\n      ]\n    },\n    \"environmentType\": \"<integer>\"\n  },\n  \"updatedAt\": \"<dateTime>\"\n}"
				}
			]
		},
		{
			"name": "/scene/entity/:entityId",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"positionX\": \"2\",\n  \"positionY\": \"2\",\n  \"scaleX\": \"2\",\n  \"scaleY\": \"2\",\n  \"rotationZ\": \"2\",\n  \"sortingLayer\": \"2\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url_domain}}/scene/entity/{{entityId}}",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"scene",
						"entity",
						"{{entityId}}"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"positionX\": \"<float>\",\n  \"positionY\": \"<float>\",\n  \"scaleX\": \"<float>\",\n  \"scaleY\": \"<float>\",\n  \"rotationZ\": \"<float>\",\n  \"sortingLayer\": \"<integer>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/scene/entity/:entityId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"scene",
								"entity",
								":entityId"
							],
							"variable": [
								{
									"key": "entityId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/scene/entity/:entityId",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain"
					}
				],
				"url": {
					"raw": "{{base_url_domain}}/scene/entity/{{entityId}}",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"scene",
						"entity",
						"{{entityId}}"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/scene/entity/:entityId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"scene",
								"entity",
								":entityId"
							],
							"variable": [
								{
									"key": "entityId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"createdAt\": \"<dateTime>\",\n  \"environmentId\": \"<uuid>\",\n  \"prefab_Id\": \"<string>\",\n  \"id\": \"<uuid>\",\n  \"positionX\": \"<float>\",\n  \"positionY\": \"<float>\",\n  \"scaleX\": \"<float>\",\n  \"scaleY\": \"<float>\",\n  \"rotationZ\": \"<float>\",\n  \"sortingLayer\": \"<integer>\",\n  \"environment\": {\n    \"createdAt\": \"<dateTime>\",\n    \"maxHeight\": \"<integer>\",\n    \"maxLength\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"userId\": \"<uuid>\",\n    \"id\": \"<uuid>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"user\": {\n      \"normalizedUserName\": \"<string>\",\n      \"userName\": \"<string>\",\n      \"id\": \"<uuid>\",\n      \"userClaims\": [\n        {\n          \"claimType\": \"<string>\",\n          \"claimValue\": \"<string>\",\n          \"userId\": \"<string>\",\n          \"id\": \"<integer>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          }\n        },\n        {\n          \"claimType\": \"<string>\",\n          \"claimValue\": \"<string>\",\n          \"userId\": \"<string>\",\n          \"id\": \"<integer>\",\n          \"user\": {\n            \"value\": \"<Circular reference to #/components/schemas/User detected>\"\n          }\n        }\n      ]\n    },\n    \"environmentType\": \"<integer>\"\n  },\n  \"updatedAt\": \"<dateTime>\"\n}"
				}
			]
		},
		{
			"name": "/scene/entity/:entityId",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url_domain}}/scene/entity/{{entityId}}",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"scene",
						"entity",
						"{{entityId}}"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/scene/entity/:entityId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"scene",
								"entity",
								":entityId"
							],
							"variable": [
								{
									"key": "entityId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/scene/:environmentId",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url_domain}}/scene/{{sceneId}}",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"scene",
						"{{sceneId}}"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/scene/:environmentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"scene",
								":environmentId"
							],
							"variable": [
								{
									"key": "environmentId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/account/logout",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url_domain}}/account/logout",
					"host": [
						"{{base_url_domain}}"
					],
					"path": [
						"account",
						"logout"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/account/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"account",
								"logout"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "createdObjectId",
			"value": ""
		}
	]
}